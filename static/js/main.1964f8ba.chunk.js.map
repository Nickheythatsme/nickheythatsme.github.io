{"version":3,"sources":["components/Button/Button.tsx","components/Button/index.tsx","components/Card/Card.tsx","components/Utils.tsx","components/NavMenu/NavItem/NavItem.tsx","components/NavMenu/NavItem/index.tsx","components/NavMenu/NavItemHolder/NavItemHolder.tsx","components/NavMenu/NavItemHolder/index.tsx","components/NavMenu/NavMenu.tsx","components/NavMenu/index.tsx","components/Theming/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","React","forwardRef","ref","outline","variant","className","props","concatClassName","classNames","children","ReactiveButton","useState","isClicked","setIsClicked","isMouseOver","setIsMouseOver","clickTimeout","handleMouseOver","value","e","onMouseOver","onMouseOut","onClick","clearTimeout","setTimeout","disabled","Card","style","displayName","Heading","Title","Subtitle","Body","Image","src","alt","_getWindowDimensions","window","width","innerWidth","height","innerHeight","breakPoints","xs","min","max","sm","md","lg","xl","Number","MAX_SAFE_INTEGER","currentWindowBreakpoint","Object","keys","breakPoint","clamp","NavItem","active","isActive","hidden","isExpanded","icon","name","navItems","NavItemHolder","activeItem","setActiveItem","isPeeking","setIsPeeking","isMobile","setIsMobile","br","currentBreakpoint","setCurrentBreakpoint","useEffect","handleResize","addEventListener","removeEventListener","useWindowBreakpoint","trail","useTrail","length","x","from","config","i","mass","tension","friction","percentExpanded","includes","map","index","div","transform","interpolate","key","onSelect","ExpandButton","currentStyle","setCurrentStyle","prevPercent","setPrevPercent","undefined","toString","classnames","FoldableMenu","expandButton","useRef","expandButtonOffset","setExpandButtonOffset","lastOffset","setLastOffset","setPercentExpanded","useSpring","y","set","bind","useDrag","down","velocity","args","movement","xy","Math","abs","toggleExpand","current","offset","offsetTop","duration","doExpand","formatStyle","containerRef","setIsExpanded","FixedMenu","NavMenu","state","listenersSet","createRef","this","setState","console","log","preventDefault","Component","VariantNames","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1964f8ba.chunk.js","sourcesContent":["import React, { useState, MouseEvent } from 'react';\nimport { VariantTypes } from '../Theming';\nimport classNames from 'classnames';\nimport './Button.scss';\n\nconst REACTIVE_TRANSITION_TIME = 100; // ms\n\ninterface PropTypes {\n    children?: React.ReactNode;\n    variant?: VariantTypes;\n    outline?: boolean;\n    className?: string;\n    [propName: string]: any;\n}\n\nconst Button = React.forwardRef<any, PropTypes>(\n    (\n        { outline, variant, className, ...props }: PropTypes,\n        ref: React.Ref<any>\n    ) => {\n        const concatClassName = classNames(\n            'btn',\n            `btn-${variant || 'primary'}${outline ? '-outline' : ''}`,\n            className\n        );\n        return (\n            <button ref={ref} {...props} className={concatClassName}>\n                {props.children}\n            </button>\n        );\n    }\n);\n\nexport const ReactiveButton = React.forwardRef<any, PropTypes>(\n    ({ ...props }: PropTypes, ref: React.Ref<any>) => {\n        const [isClicked, setIsClicked] = useState(false);\n        const [isMouseOver, setIsMouseOver] = useState(false);\n        let clickTimeout: any = null;\n\n        let className = classNames({\n            'btn-clicked': isClicked,\n            'btn-mouse-over': isMouseOver,\n        });\n\n        const handleClick = (e: MouseEvent) => {\n            clearTimeout(clickTimeout);\n            setIsMouseOver(false);\n            setIsClicked(true);\n            clickTimeout = setTimeout(() => {\n                setIsClicked(false);\n            }, REACTIVE_TRANSITION_TIME);\n            props.onClick && props.onClick(e);\n        };\n\n        const handleMouseOver = (value: boolean, e: MouseEvent) => {\n            setIsMouseOver(value);\n            value && props.onMouseOver && props.onMouseOver(e);\n            !value && props.onMouseOut && props.onMouseOut(e);\n        };\n\n        return (\n            <Button\n                {...props}\n                onClick={handleClick}\n                onMouseOver={(e: MouseEvent) => handleMouseOver(true, e)}\n                onMouseOut={(e: MouseEvent) => handleMouseOver(false, e)}\n                ref={ref}\n                className={className}\n                disabled={props.disabled}\n            >\n                {props.children}\n            </Button>\n        );\n    }\n);\n\nexport default Button;\n","import Button from './Button';\n\nexport { ReactiveButton } from './Button';\nexport default Button;\n","import React, { CSSProperties } from 'react';\nimport classNames from 'classnames';\nimport './Card.scss';\n\ninterface CardPropTypes {\n    style?: CSSProperties;\n    children?: React.ReactNode;\n    className?: string;\n}\n\ninterface CardImagePropTypes extends CardPropTypes {\n    src: string;\n    alt: string;\n}\n\ntype CardForwardRef<T, P = CardPropTypes> = React.ForwardRefExoticComponent<\n    P & React.RefAttributes<T>\n>;\ninterface CardModule extends CardForwardRef<HTMLDivElement> {\n    Heading: CardForwardRef<HTMLDivElement>;\n    Title: CardForwardRef<HTMLHeadingElement>;\n    Subtitle: CardForwardRef<HTMLDivElement>;\n    Body: CardForwardRef<HTMLDivElement>;\n    Image: CardForwardRef<HTMLImageElement, CardImagePropTypes>;\n}\n\nconst Card = React.forwardRef<HTMLDivElement, CardPropTypes>((props, ref) => (\n    <div\n        ref={ref}\n        style={props.style}\n        className={classNames('card', props.className)}\n    >\n        {props.children}\n    </div>\n));\nCard.displayName = 'card';\n(Card as CardModule).Heading = React.forwardRef<HTMLDivElement, CardPropTypes>(\n    (props, ref) => (\n        <div\n            ref={ref}\n            style={props.style}\n            className={classNames('card-heading', props.className)}\n        >\n            {props.children}\n        </div>\n    )\n);\n(Card as CardModule).Title = React.forwardRef<\n    HTMLHeadingElement,\n    CardPropTypes\n>((props, ref) => (\n    <h3\n        ref={ref}\n        style={props.style}\n        className={classNames('card-title', props.className)}\n    >\n        {props.children}\n    </h3>\n));\n(Card as CardModule).Subtitle = React.forwardRef<\n    HTMLHeadingElement,\n    CardPropTypes\n>((props, ref) => (\n    <h4\n        ref={ref}\n        style={props.style}\n        className={classNames('card-subtitle', props.className)}\n    >\n        {props.children}\n    </h4>\n));\n(Card as CardModule).Body = React.forwardRef<HTMLDivElement, CardPropTypes>(\n    (props, ref) => (\n        <div\n            ref={ref}\n            style={props.style}\n            className={classNames('card-body', props.className)}\n        >\n            {props.children}\n        </div>\n    )\n);\n(Card as CardModule).Image = React.forwardRef<\n    HTMLImageElement,\n    CardImagePropTypes\n>((props, ref) => (\n    <img\n        src={props.src}\n        style={props.style}\n        alt={props.alt}\n        ref={ref}\n        className={classNames('card-image', props.className)}\n    />\n));\nexport default Card as CardModule;\n","import { useState, useEffect } from 'react';\n\nfunction _getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height,\n    };\n}\n\nconst breakPoints = {\n    xs: { min: 0, max: 576 },\n    sm: { min: 576, max: 768 },\n    md: { min: 768, max: 992 },\n    lg: { min: 992, max: 1200 },\n    xl: { min: 1200, max: Number.MAX_SAFE_INTEGER },\n};\n\nexport function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(\n        _getWindowDimensions()\n    );\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(_getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}\n\nexport function currentWindowBreakpoint(width?: number) {\n    if (!width) {\n        width = _getWindowDimensions().width;\n    }\n    for (let breakPoint of Object.keys(breakPoints)) {\n        if (\n            width >= (breakPoints as any)[breakPoint].min &&\n            width < (breakPoints as any)[breakPoint].max\n        ) {\n            return breakPoint;\n        }\n    }\n    return 'xl';\n}\n\nexport function useWindowBreakpoint() {\n    const [currentBreakpoint, setCurrentBreakpoint] = useState('xs');\n\n    useEffect(() => {\n        function handleResize() {\n            let { width } = _getWindowDimensions();\n            setCurrentBreakpoint(currentWindowBreakpoint(width));\n        }\n        handleResize();\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return currentBreakpoint;\n}\n\nexport function clamp(value: number, min: number, max: number) {\n    if (value < min) {\n        return min;\n    }\n    if (value > max) {\n        return max;\n    }\n    return value;\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport './NavItem.scss';\n\ntype HTMLMouseEvent = React.MouseEvent<HTMLDivElement, MouseEvent>;\ninterface PropTypes {\n    name: string;\n    icon: React.ReactNode;\n    isExpanded?: boolean;\n    isActive?: boolean;\n    onClick?: (e: HTMLMouseEvent) => any;\n}\n\nfunction NavItem(props: PropTypes) {\n    return (\n        <div\n            onClick={props.onClick}\n            className={classNames(\n                'nav-item',\n                { active: props.isActive },\n                { hidden: !props.isExpanded }\n            )}\n        >\n            <div\n                className={classNames('nav-item-icon', {\n                    active: props.isActive,\n                })}\n            >\n                {props.icon}\n            </div>\n            <div\n                className={classNames('nav-item-content', {\n                    hidden: !props.isExpanded,\n                })}\n            >\n                {props.name}\n            </div>\n        </div>\n    );\n}\n\nexport default NavItem;\n","import NavItem from './NavItem';\nexport default NavItem;\n","import React, { useState, useEffect } from 'react';\nimport NavItem from '../NavItem';\nimport { useTrail, animated } from 'react-spring';\nimport {\n    IoIosTrophy,\n    IoIosHappy,\n    IoMdHome,\n    IoMdSettings,\n} from 'react-icons/io';\nimport { useWindowBreakpoint } from '../../Utils';\nimport './NavItemHolder.scss';\n\ninterface PropTypes {\n    children?: React.ReactNode;\n    percentExpanded: number;\n    onSelect?: (name: string) => void;\n}\n\nexport const navItems = [\n    { icon: <IoMdHome />, name: 'Home' },\n    { icon: <IoIosHappy />, name: 'Profile' },\n    { icon: <IoMdSettings />, name: 'Settings' },\n    { icon: <IoIosTrophy />, name: 'Tasks' },\n];\n\nexport default function NavItemHolder(props: PropTypes) {\n    const [activeItem, setActiveItem] = useState('Home');\n    const [isPeeking, setIsPeeking] = useState(false);\n    const [isMobile, setIsMobile] = useState(true);\n    const br = useWindowBreakpoint();\n    const trail = useTrail(navItems.length, {\n        x: isPeeking ? 0 : -200,\n        from: {\n            x: -200,\n        },\n        config: (i: number) => ({\n            mass: 1,\n            tension: 170 * (i + 1),\n            friction: 26,\n        }),\n    });\n\n    useEffect(() => {\n        if (props.percentExpanded > 70) {\n            setIsPeeking(true);\n        } else {\n            setIsPeeking(false);\n        }\n        setIsMobile(['xs', 'sm'].includes(br));\n    }, [props, setIsPeeking, br, setIsMobile, isMobile]);\n\n    const handleClick = (name: string) => {\n        setActiveItem(name);\n        props.onSelect && props.onSelect(name);\n    };\n\n    return (\n        <div className=\"nav-item-holder\">\n            {trail.map(({ x }, index) => (\n                <animated.div\n                    style={\n                        isMobile\n                            ? {\n                                  transform: (x as any).interpolate(\n                                      (x: any) => `translate3d(0,${x}px,0)`\n                                  ),\n                              }\n                            : {}\n                    }\n                    key={navItems[index].name}\n                >\n                    <NavItem\n                        icon={navItems[index].icon}\n                        name={navItems[index].name}\n                        isExpanded={isPeeking}\n                        isActive={activeItem === navItems[index].name}\n                        onClick={() => handleClick(navItems[index].name)}\n                    />\n                </animated.div>\n            ))}\n        </div>\n    );\n}\n","import NavItemHolder from './NavItemHolder';\nexport default NavItemHolder;\n","import React, { useRef, useState, useEffect } from 'react';\nimport { useDrag } from 'react-use-gesture';\nimport classnames from 'classnames';\nimport { IoIosArrowUp } from 'react-icons/io';\nimport { useSpring, animated } from 'react-spring';\nimport { FullGestureState } from 'react-use-gesture/dist/types';\nimport { currentWindowBreakpoint, clamp } from '../Utils';\nimport NavItemHolder from './NavItemHolder';\nimport './NavMenu.scss';\n\ninterface NavMenuStateTypes {\n    isMobile: boolean;\n    listenersSet: boolean;\n}\n\ninterface MenuArgs {\n    percentExpanded: number;\n    setIsExpanded: (value: boolean) => void;\n}\n\ninterface MenuPropTypes {\n    children: (results: MenuArgs) => React.ReactNode;\n    containerRef: React.Ref<any>;\n}\n\nconst ExpandButton = React.forwardRef(\n    ({ percentExpanded, className, ...props }: any, ref: React.Ref<any>) => {\n        const [currentStyle, setCurrentStyle]: [any, any] = useState(null);\n        const [prevPercent, setPrevPercent] = useState(0);\n        useEffect(() => {\n            if (\n                percentExpanded !== undefined &&\n                percentExpanded !== prevPercent\n            ) {\n                // eslint-disable-next-line\n                percentExpanded = clamp(percentExpanded, 0, 100);\n                setCurrentStyle({\n                    transform: `rotate(${180 -\n                        1.8 * percentExpanded}deg)`.toString(),\n                });\n                setPrevPercent(percentExpanded);\n            }\n        }, [percentExpanded, setCurrentStyle, prevPercent, setPrevPercent]);\n        return (\n            <div\n                {...props}\n                ref={ref}\n                className={classnames('expand-button', className)}\n                style={currentStyle}\n            >\n                <IoIosArrowUp />\n            </div>\n        );\n    }\n);\n\nfunction FoldableMenu(props: MenuPropTypes) {\n    const expandButton = useRef(null);\n    const [expandButtonOffset, setExpandButtonOffset] = useState(0);\n    const [lastOffset, setLastOffset] = useState(0);\n    const [percentExpanded, setPercentExpanded] = useState(0);\n    const [{ y }, set] = useSpring(() => ({ y: 0 }));\n\n    const bind = useDrag(\n        ({ down, velocity, args, movement, xy }: FullGestureState<'drag'>) => {\n            let [expandButtonOffset, lastOffset, setPercentExpanded] = args;\n            velocity = clamp(velocity, 1, 8);\n            if (Math.abs(movement[1]) < 10) {\n                return;\n            }\n            let y = movement[1] - lastOffset;\n            if (!down) {\n                if (xy[1] > expandButtonOffset / 2) {\n                    toggleExpand(true);\n                    return;\n                } else {\n                    toggleExpand(false);\n                    return;\n                }\n            }\n            let percent = (100 / Math.abs(expandButtonOffset)) * y + 100;\n            setPercentExpanded(percent);\n            set({\n                y: y,\n                config: {\n                    mass: velocity / 2,\n                    tension: 500 * velocity,\n                    friction: 50,\n                },\n            });\n        }\n    );\n\n    useEffect(() => {\n        if (\n            expandButtonOffset === 0 &&\n            expandButton &&\n            (expandButton as any).current\n        ) {\n            let offset: number = (expandButton as any).current.offsetTop;\n            setExpandButtonOffset(offset);\n            setLastOffset(offset);\n            setPercentExpanded(0);\n            set({\n                y: -offset,\n                config: { mass: 1, tension: 200, friction: 50, duration: 0 },\n            });\n        }\n    }, [\n        expandButtonOffset,\n        setExpandButtonOffset,\n        expandButton,\n        setLastOffset,\n        setPercentExpanded,\n        percentExpanded,\n        set,\n    ]);\n\n    const formatStyle = (y: any) => ({\n        transform: y.interpolate((y: any) => `translateY(${y}px)`),\n    });\n\n    const toggleExpand = (doExpand?: boolean) => {\n        let config = { mass: 1, tension: 500, friction: 50 };\n        if (doExpand === true || (doExpand !== false && lastOffset > 0)) {\n            setPercentExpanded(100);\n            setLastOffset(0);\n            set({ y: 0, config });\n        } else {\n            setPercentExpanded(0);\n            setLastOffset(expandButtonOffset);\n            set({ y: -expandButtonOffset, config });\n        }\n    };\n\n    return (\n        <animated.div\n            {...bind(expandButtonOffset, lastOffset, setPercentExpanded)}\n            className=\"nav-menu\"\n            style={formatStyle(y)}\n            ref={props.containerRef}\n        >\n            <ExpandButton\n                onClick={toggleExpand}\n                ref={expandButton}\n                percentExpanded={percentExpanded}\n            />\n            {props.children({ percentExpanded, setIsExpanded: toggleExpand })}\n        </animated.div>\n    );\n}\n\nfunction FixedMenu(props: MenuPropTypes) {\n    const [isExpanded, setIsExpanded] = useState(true);\n\n    return (\n        <div className=\"nav-menu\">\n            <ExpandButton\n                onClick={() => {\n                    setIsExpanded(!isExpanded);\n                }}\n                className={isExpanded ? 'expand' : ''}\n            />\n            {props.children({\n                percentExpanded: isExpanded ? 100 : 0,\n                setIsExpanded,\n            })}\n        </div>\n    );\n}\n\nexport default class NavMenu extends React.Component<any, NavMenuStateTypes> {\n    state = {\n        isMobile: false,\n        listenersSet: false,\n    };\n    private containerRef: React.Ref<any>;\n\n    constructor(props: any) {\n        super(props);\n        this.handleResize = this.handleResize.bind(this);\n        this.containerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.handleResize();\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    componentDidUpdate() {\n        if (!this.state.listenersSet && (this.containerRef as any).current) {\n            this.setState({ listenersSet: true });\n            console.log('adding listeners');\n            (this.containerRef as any).current.addEventListener(\n                'touchmove',\n                (e: TouchEvent) => {\n                    e.preventDefault();\n                }\n            );\n        }\n    }\n\n    handleResize() {\n        this.setState({\n            isMobile: ['xs', 'sm'].includes(currentWindowBreakpoint()),\n        });\n    }\n\n    render() {\n        if (this.state.isMobile) {\n            return (\n                <div ref={this.containerRef}>\n                    <FoldableMenu containerRef={this.containerRef}>\n                        {({ percentExpanded, setIsExpanded }) => (\n                            <NavItemHolder\n                                percentExpanded={percentExpanded}\n                                onSelect={() =>\n                                    setTimeout(() => setIsExpanded(false), 400)\n                                }\n                            />\n                        )}\n                    </FoldableMenu>\n                </div>\n            );\n        } else {\n            return (\n                <FixedMenu containerRef={this.containerRef}>\n                    {({ percentExpanded, setIsExpanded }) => (\n                        <NavItemHolder\n                            percentExpanded={percentExpanded}\n                            onSelect={() => setIsExpanded(false)}\n                        />\n                    )}\n                </FixedMenu>\n            );\n        }\n    }\n}\n","import NavMenu from './NavMenu';\nexport default NavMenu;\n","export const VariantNames = [\n    'primary',\n    'secondary',\n    'tertiary',\n    'info',\n    'warning',\n    'danger',\n    'light',\n    'dark',\n];\nexport type VariantTypes =\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'info'\n    | 'warning'\n    | 'danger'\n    | 'light'\n    | 'dark';\n","import React from 'react';\nimport Button, { ReactiveButton } from './components/Button';\nimport Card from './components/Card';\nimport NavMenu from './components/NavMenu';\nimport { VariantNames } from './components/Theming';\nimport './App.scss';\nimport './components/Theming/dark.scss';\nimport 'bootstrap/scss/bootstrap-grid.scss';\n\nconst App: React.FC = () => {\n    return (\n        <>\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <NavMenu />\n                    <div className=\"col\">\n                        <h1>App</h1>\n                        <Card>\n                            <Card.Image\n                                src=\"https://images.pexels.com/photos/257360/pexels-photo-257360.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\"\n                                alt=\"nature image\"\n                            />\n                            <Card.Heading>\n                                <Card.Title>Test title</Card.Title>\n                                <Card.Subtitle>Test subtitle</Card.Subtitle>\n                            </Card.Heading>\n                            <Card.Body>\n                                Test body. This is the body of the card. It's\n                                meant to hold more data\n                            </Card.Body>\n                        </Card>\n                        <Card>\n                            <Card.Image\n                                src=\"https://images.pexels.com/photos/33109/fall-autumn-red-season.jpg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\"\n                                alt=\"nature image\"\n                            />\n                            <Card.Heading>\n                                <Card.Title>A great nature walk</Card.Title>\n                                <Card.Subtitle>\n                                    Testing the nature subtitle\n                                </Card.Subtitle>\n                            </Card.Heading>\n                            <Card.Body>\n                                Test body. This is the body of the card. It's\n                                meant to hold more data\n                            </Card.Body>\n                        </Card>\n                        <div className=\"row\">\n                            {VariantNames.map(name => (\n                                <div key={name}>\n                                    <h3>{name}</h3>\n                                    <Button variant={name}>Submit</Button>\n                                    <Button variant={name} outline>\n                                        Submit\n                                    </Button>\n                                    <ReactiveButton variant={name}>\n                                        Submit\n                                    </ReactiveButton>\n                                    <ReactiveButton variant={name} outline>\n                                        Submit\n                                    </ReactiveButton>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}